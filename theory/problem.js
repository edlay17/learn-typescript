/*
Типизация в ЯП:

1) Строгая или нестрогая(JS)
При строгой приведение типов явное.

При нестрогой есть неявное приведение типов, например в JS:
"123" + 555 => "123555"
Минусы: нужно помнить о приведении, менее очевидно, усложнение понимания кода, легко ошибиться
пример:
const age = 0;
if (age) console.log("возраст задан"); // конструкция внутри if не сработает

так будет работать как ожидается:
if (typeof(age) === 'number') console.log("возраст задан");

Плюсы: меньше кода, меньше синтаксического шума, удобно для чего-то маленького и простого
===///===

2) Явная или неявная(JS)
Явная - разработчик обязан явно сообщить тип в коде
Минусы: добавляет много шума в код
Плюсы: компилятор помогает находить ошибки в коде и может подсказывать во время разработки

Неявная - Компилятор сам понимает (исходя из контекста) с какими типом создать переменную или переопределить
let a = 1;
let b = "1";
let c = [1,2,3];
в JS виртуальная машина вычисляет все типы, когда код начинает выполняться

Есть еще гибридная, когда можно сообщить тип, а если нет, то комплилятор сам понимает из контекста
===///===

3) Динамическая(JS) или статическая
При динамической типизации, типы определяются в рантайме.
Плюсы: очень краткий, лаконичный и гибкий код
Минусы: менее эффективная работа (компилятор не может предупреждать об ошибках, не может оптимизировать код)

При статической типизации, компилятор делает оптимизации, т.к. типы не могут измениться, они четко определены и компилятор знает их на этапе компиляции.
Плюсы: эффективность
Минусы: больше кода, больше правил
*/

/*
Как решить проблему ошибок при динамической типизации:
1) Типы в комментариях, поддержка комментариев на уровне ide
/*
* @param {number} a
* @param {number} b
* @returns {number}
*/
function sum (a, b) {
    return a + b;
}
/*
2) TS и аналогичные проекты, позволяет явно анотировать типы в коде
Добавляет анотацию типов и семантику, которая ведет статический анализ
TS не делает никакой оптимизации, на выходе получается обычный js код
Только документация + анализ и помощь в выявлении ошибок на этапе компиляции, до рантайма
 */